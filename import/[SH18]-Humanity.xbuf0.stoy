/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>[SH18] Humanity</name>
 * 
 * <description>
 *   A short story about humanity, from a global perspective. Followed by a minigame
 *   in the spirit of SimEarth (see below to enable). Restart to sync music. Read
 *   the comment at the top of the code for commentary and instructions.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/XttcWn</url>
 * 
 * <date>2018-08-04</date>
 * 
 * <tags></tags>
 * 
 * <pass-name>Buffer A</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Buffer A" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel3; //! keyboard[]
uniform sampler2D iChannel0; //! buffer[xbuf: 0, wrap: GL_CLAMP_TO_EDGE, mipmap: true]
uniform sampler2D iChannel1; //! WARNING: Unknown input type: "musicstream". Source: "https://soundcloud.com/john-murphy-composer/adagio-in-d-minor-2014"

#include "[SH18]-Humanity.frag"

// 2018 David A Roberts <https://davidar.io>

// plate tectonics and hydraulic erosion model

#define buf(p) textureLod(iChannel0,fract((p)/iResolution.xy),0.)
#define keypress(k) (texelFetch(iChannel3, ivec2(k,0), 0).x > 0.)

// procedural craters based on https://www.shadertoy.com/view/MtjGRD
float craters(vec3 x) {
    vec3 p = floor(x);
    vec3 f = fract(x);
    float va = 0.;
    float wt = 0.;
    for (int i = -2; i <= 2; i++) for (int j = -2; j <= 2; j++) for (int k = -2; k <= 2; k++) {
        vec3 g = vec3(i,j,k);
        vec3 o = 0.8 * hash33(p + g);
        float d = distance(f - g, o);
        float w = exp(-4. * d);
        va += w * sin(2.*PI * sqrt(d));
        wt += w;
	}
    return abs(va / wt);
}

float protoplanet(vec2 uv) {
    float lat = 180. * uv.y - 90.;
    float lon = 360. * uv.x;
    vec3 p = 1.5 * vec3(sin(lon*PI/180.) * cos(lat*PI/180.), sin(lat*PI/180.), cos(lon*PI/180.) * cos(lat*PI/180.));
    float x = 0.;
    for (float i = 0.; i < 5.; i++) {
        float c = craters(0.4 * pow(2.2, i) * p);
        float noise = 0.4 * exp(-3. * c) * FBM(10. * p);
        float w = clamp(3. * pow(0.4, i), 0., 1.);
		x += w * (c + noise);
	}
    return pow(x, 3.);
}

vec2 move(float q) {
    return plate_move(q, iFrame, iTime);
}

float slope(vec2 p, vec2 q) {
    if (p == q) return 0.;
    return (buf(q).z - buf(p).z) / distance(p,q);
}

vec2 rec(vec2 p) { // direction of water flow at point
    vec2 d = vec2(0);
    if (slope(p + N,  p) >= slope(p + d, p)) d = N;
    if (slope(p + NE, p) >= slope(p + d, p)) d = NE;
    if (slope(p + E,  p) >= slope(p + d, p)) d = E;
    if (slope(p + SE, p) >= slope(p + d, p)) d = SE;
    if (slope(p + S,  p) >= slope(p + d, p)) d = S;
    if (slope(p + SW, p) >= slope(p + d, p)) d = SW;
    if (slope(p + W,  p) >= slope(p + d, p)) d = W;
    if (slope(p + NW, p) >= slope(p + d, p)) d = NW;
    return d;
}

void mainImage( inout vec4 c, in vec2 p) {
    if(iTime < OCEAN_START_TIME && iFrame % 50 < 1 || iFrame < 10) {
        c = vec4(0);
        c.x = -1.;
        c.w = hash12(p);
        c.z = clamp(15. - 3.5 * protoplanet(p / iResolution.xy), 0., 15.);
        return;
    }
    
    c = buf(p);
    
    if (iTime < OCEAN_START_TIME) return;
    float smoothstart = smoothstep(OCEAN_START_TIME, OCEAN_END_TIME, iTime);
    
    vec4 n = buf(p + N);
    vec4 e = buf(p + E);
    vec4 s = buf(p + S);
    vec4 w = buf(p + W);
    
    if (iTime < TECTONICS_END_TIME || iTime > STORY_END_TIME) {
        // diffuse uplift through plate
        float dy = 0.;
        if (e.x == c.x) dy += e.y - c.y;
        if (w.x == c.x) dy += w.y - c.y;
        if (n.x == c.x) dy += n.y - c.y;
        if (s.x == c.x) dy += s.y - c.y;
        c.y = max(0., c.y + 0.1 * dy);
    }
    
    // tectonic uplift
    float max_uplift = 1.;
    if (c.z - OCEAN_DEPTH > 1.) max_uplift = 1. / (c.z - OCEAN_DEPTH);
    c.z += clamp(2. * c.y - 1., 0., max_uplift);
    
    if (c.z >= OCEAN_DEPTH - 0.05) {
        // thermal erosion
        float dz = 0.;
        if (abs(e.z - c.z) > 1.) dz += e.z - c.z;
        if (abs(w.z - c.z) > 1.) dz += w.z - c.z;
        if (abs(n.z - c.z) > 1.) dz += n.z - c.z;
        if (abs(s.z - c.z) > 1.) dz += s.z - c.z;
        c.z = max(0., c.z + 0.02 * dz);

        // flow accumulation
        c.w = 1. + fract(c.w);
        if (rec(p + N)  == -N)  c.w += floor(buf(p + N).w);
        if (rec(p + NE) == -NE) c.w += floor(buf(p + NE).w);
        if (rec(p + E)  == -E)  c.w += floor(buf(p + E).w);
        if (rec(p + SE) == -SE) c.w += floor(buf(p + SE).w);
        if (rec(p + S)  == -S)  c.w += floor(buf(p + S).w);
        if (rec(p + SW) == -SW) c.w += floor(buf(p + SW).w);
        if (rec(p + W)  == -W)  c.w += floor(buf(p + W).w);
        if (rec(p + NW) == -NW) c.w += floor(buf(p + NW).w);

        if (rec(p) == vec2(0)) { // local minima
            c.z += 0.001; // extra sediment
        } else {
            vec4 receiver = buf(p + rec(p));
            if (c.z >= OCEAN_DEPTH) c.w = floor(c.w) + fract(receiver.w); // basin colouring
            // hydraulic erosion with stream power law
            float pslope = (c.z - receiver.z) / length(rec(p));
            float dz = min(pow(floor(c.w), 0.8) * pow(pslope, 2.), c.z);
            dz *= smoothstart;
            c.z = max(c.z - 0.05 * dz, receiver.z);
        }
    } else {
        c.w = fract(c.w);
    }
	
    // approximation of sediment accumulation
    if (iTime < TECTONICS_END_TIME || iTime > STORY_END_TIME) {
        c.z += 2.5e-4 * clamp(c.z + 2.5, 0., 10.) * smoothstart;
    } else if (c.z >= OCEAN_DEPTH - 0.05) {
        c.z += 2.5e-4;
    }
    
    bool subduct = false;
    float prev_uplift = c.y;
    
    if (iFrame % 5000 < 10) {
        // generate new plate boundaries
        c.x = -1.;
    } else if (c.x < 0.) { // no plate under this point yet
        if (length(hash33(vec3(p,iFrame))) < 7e-3) {
            // seed a new plate with random velocity
            c.x = fract(hash13(vec3(p,iFrame)) + 0.25);
        } else {
            // accretion
            int dir = int(4.*hash13(vec3(p,iFrame)));
            if(dir == 0) c.x = s.x;
            if(dir == 1) c.x = w.x;
            if(dir == 2) c.x = n.x;
            if(dir == 3) c.x = e.x;
        }
        c.y = clamp(c.y, 0., 1.);
    } else if (move(n.x) == S) {
        if (move(c.x) != S) subduct = true;
        c = n;
    } else if (move(e.x) == W) {
        if (move(c.x) != W) subduct = true;
        c = e;
    } else if (move(s.x) == N) {
        if (move(c.x) != N) subduct = true;
        c = s;
    } else if (move(w.x) == E) {
        if (move(c.x) != E) subduct = true;
        c = w;
    } else if (move(c.x) != vec2(0) && buf(p - move(c.x)).x >= 0.) {
        // rift
        c.x = -1.;
        if (c.z < OCEAN_DEPTH) {
            c.y = 0.;
            c.z = 0.;
        }
        c.w = hash12(p);
    }
    
    if (subduct) {
        c.y = 1.;
    } else if (iTime < TECTONICS_END_TIME || iTime > STORY_END_TIME) {
        c.y = max(c.y - 1e-4, 0.);
    }
    
    if (iMouse.z > 0. && iTime > STORY_END_TIME && !keypress(KeyS)) {
        vec2 r = (p - iMouse.xy) / 10.;
        float magnitude = 0.5 * exp(-0.5 * dot(r,r));
        if (keypress(KeyD)) magnitude *= -1.;
        if (keypress(KeyU)) c.y += magnitude / 10.;
        else c.z += magnitude;
    }
    
    c.y = clamp(c.y, 0., 1.);
    c.z = max(c.z, 0.);
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}