/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Bumpy Earth</name>
 * 
 * <description>
 *   Click and drag to rotate.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/XsKBzt</url>
 * 
 * <date>2018-06-27</date>
 * 
 * <tags></tags>
 * 
 * <other-passes>
 *   <pass-type>buffer0</pass-type>
 * </other-passes>
 *
 * <pass-name>Image</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Default" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel0; //! buffer[xbuf: 0, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]

#include "Bumpy-Earth.frag"

#define EPSILON 1e-4

#define PI 3.14159265359

float bump(vec3 p) {
    float lat = 90. - acos(p.y / length(p)) * 180./PI;
    float lon = atan(p.x, p.z) * 180./PI;
    vec2 uv = vec2(0.5 + lon/360., 0.5 + lat/180.);
    vec4 c = texture(iChannel0, uv * vec2(144,72)/iResolution.xy);
    float land = 1. - clamp(c.b - c.r + 3. * fbm(32. * uv), 0., 1.);
    float height = land + 3. * c.r/0.31;
    return height;
}

float earth(vec3 p) {
    return min(length(p) - 1. - 0.02 * bump(p), 30. - length(p));
}

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    vec2 p = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;
    float lat = 45. * sin(0.1 * (iTime + 46.));
    float lon = 0.05 * (iTime + 46.) * 360.;
    if (iMouse.z > 0.) {
        lat = 90.  - 180. * iMouse.y/iResolution.y;
        lon = 180. - 360. * iMouse.x/iResolution.x;
    }
    vec3 camPos = 2. * vec3(sin(lon*PI/180.) * cos(lat*PI/180.), sin(lat*PI/180.), cos(lon*PI/180.) * cos(lat*PI/180.));
    vec3 w = normalize(-camPos);
    vec3 u = normalize(cross(w, vec3(0,1,0)));
    vec3 v = normalize(cross(u, w));
    mat3 camera = mat3(u, v, w);
    vec3 rayDirection = camera * normalize(vec3(p.xy, 1.5));
    float rayDistance = 0.;
    vec3 hitPos;
    for (int i = 0; i < 200; i++) {
        hitPos = camPos + rayDirection * rayDistance;
        float r = earth(hitPos);
        if (abs(r) < EPSILON) break;
        rayDistance += r;
    }
    float height = bump(hitPos);
    if (height > 0.5) fragColor = vec4(1. - 0.1 * clamp(floor(1.5 * height), 0., 4.));
    if (rayDistance > 5.) fragColor = 0.25 + 0.5 * fragColor;
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}