/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Population dynamics</name>
 * 
 * <description>
 *   Predators (blue) eat prey (red). Prey eat vegetation (green). Click to show
 *   history of population cycles in each patch.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MsVfzV</url>
 * 
 * <date>2018-07-02</date>
 * 
 * <tags></tags>
 * 
 * <other-passes>
 *   <pass-type>buffer0</pass-type>
 *   <pass-type>buffer1</pass-type>
 * </other-passes>
 *
 * <pass-name>Image</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Default" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel0; //! buffer[xbuf: 0, mipmap: true]
uniform sampler2D iChannel1; //! buffer[xbuf: 1, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]

#include "Population-dynamics.frag"

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    vec4 c = texture(iChannel0, fragCoord/iResolution.xy);
    fragColor = vec4(0.92, 0.67, 0.49, 1);
    fragColor = mix(fragColor, vec4(0.39, 0.51, 0.16, 1), smoothstep(0.0, 0.1, c.g));
    fragColor = mix(fragColor, vec4(0.01, 0.19, 0.01, 1), smoothstep(0.1, 0.2, c.g));
    if (c.r > 0.) fragColor = mix(fragColor, vec4(0.2, 0., 0., 1), 0.75);
    if (c.b > 0.) fragColor = mix(fragColor, vec4(0., 0., 0.5, 1), 0.75);
    
    if (iMouse.z > 0. || (fragCoord.x < 64. && fragCoord.y < 64.)) {
        c = texture(iChannel1, fragCoord/iResolution.xy);
        fragColor = mix(fragColor, vec4(1), 0.5);
        if (c.r > 0.) fragColor = vec4(0.5, 0., 0., 1);
        if (c.b > 0.) fragColor = vec4(0., 0., 0.5, 1);
    }
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}