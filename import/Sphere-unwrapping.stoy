/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Sphere unwrapping</name>
 * 
 * <description>
 *   Simple transition between a sphere projection and rectangular map
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/XsyfDt</url>
 * 
 * <date>2018-07-07</date>
 * 
 * <tags></tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")



#define PI 3.14159265359

#define CAMERA_DIST 25.

vec4 map(vec2 p) {
    vec3 col = vec3(0.5 + sin(20. * PI * p.x), 0.5 + sin(20. * PI * p.y), 1.);
    return vec4(sqrt(0.5 * clamp(col, 0., 1.)), 1.);
}

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    vec2 p = (2. * fragCoord.xy - iResolution.xy) / iResolution.x;
    fragColor = vec4(sqrt(vec3(0.05) * (1. - length(p)/2.)), 1.);
    float t = clamp(1.125 - abs(mod(iTime + 1., 10.) - 5.)/4., 0., 1.);
    if (t < 1.) {
        float zoom = pow(2. * t, 5.) + 1.;
        vec3 dir = normalize(vec3(PI * p, -zoom * (CAMERA_DIST - 1.)));
        float b = CAMERA_DIST * dir.z;
        float h = b*b - CAMERA_DIST*CAMERA_DIST + 1.;
        if (h >= 0.) {
            vec3 q = vec3(0., 0., CAMERA_DIST) - dir * (b + sqrt(h));
            p = zoom * vec2(atan(q.x, q.z) / PI, 0.5 - acos(q.y / length(q)) / PI);
        } else {
            return;
        }
    }
    if (abs(p.y) <= 0.5 && abs(p.x) <= 1.) fragColor = map(p);
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}