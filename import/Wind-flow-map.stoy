/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Wind flow map</name>
 * 
 * <description>
 *   Loosely based on [url]https://blog.mapbox.com/how-i-built-a-wind-map-with-webgl-b63022b5537f[/url]
 *   - would be even easier if Shadertoy had vertex shaders ;)
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/4sKBz3</url>
 * 
 * <date>2018-06-24</date>
 * 
 * <tags></tags>
 * 
 * <other-passes>
 *   <pass-type>buffer0</pass-type>
 *   <pass-type>buffer1</pass-type>
 *   <pass-type>buffer2</pass-type>
 * </other-passes>
 *
 * <pass-name>Image</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Default" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel0; //! buffer[xbuf: 2, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]

#include "Wind-flow-map.frag"

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    float r = texture(iChannel0, fragCoord/iResolution.xy).x;
    r = 0.9 - 0.8 * r;
    fragColor = vec4(vec3(r), 1);
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}