/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Population dynamics</name>
 * 
 * <description>
 *   Predators (blue) eat prey (red). Prey eat vegetation (green). Click to show
 *   history of population cycles in each patch.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MsVfzV</url>
 * 
 * <date>2018-07-02</date>
 * 
 * <tags></tags>
 * 
 * <pass-name>Buf A</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Buf A" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel0; //! buffer[xbuf: 0, mipmap: false, filter: GL_LINEAR]

#include "Population-dynamics.frag"

void mainImage( inout vec4 c, in vec2 p ) {
    if (iFrame < 10) {
        if (hash22(p).x < 0.33) c.r = 1.;
        else if (hash22(p).y < 0.33) c.b = 1.;
    	c.g = clamp(fbm(3. * p/iResolution.xy), 0.25, 1.);
        return;
    }
    
    c = texture(iChannel0, p/iResolution.xy);
    
    float r = hash33(vec3(p, iFrame)).x;
    vec2 d = (r < 0.25) ? vec2( 0, 1)
           : (r < 0.50) ? vec2( 1, 0)
           : (r < 0.75) ? vec2( 0,-1)
           :              vec2(-1, 0);
    vec4 n = texture(iChannel0, (p + d) / iResolution.xy);
    
    r = hash33(vec3(p, iFrame)).z / 0.2;
    
    // predator diffusion
    if (c.rb == vec2(0) && r < 0.5) c.b = n.b;
    if (n.rb == vec2(0) && hash33(vec3(p+d, iFrame)).z / 0.2 < 0.5) c.b = 0.;
    
    // prey diffusion
    if (c.rb == vec2(0) && r < 0.2) c.r = n.r;
    if (n.rb == vec2(0) && hash33(vec3(p+d, iFrame)).z / 0.2 < 0.2) c.r = 0.;
    
    // predator death
    if (r < 0.1) c.b = 0.;
    
    // predation
    if (c.r > 0. && n.b > 0. && r < 2.2) {
        c.r = 0.;
        c.b = 1.;
    }
    
    // prey offspring
    if (c.rb == vec2(0) && n.r > 0. && r < 4. * c.g) c.r = 1.;
    
    // grazing
    if (c.r > 0.) {
        c.g -= 0.01;
    } else {
        c.g += 1e-3 * hash33(vec3(p, floor(iTime))).y;
    }
    c.g = clamp(c.g, 0., 1.);
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}