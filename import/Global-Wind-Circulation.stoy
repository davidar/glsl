/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Global Wind Circulation</name>
 * 
 * <description>
 *   Generates pressure systems (click to show) and wind flow patterns from a land/ocean
 *   map. Based on [url=https://web.archive.org/web/20130619132254/http://jc.tech-galaxy.com/bricka/climate_cookbook.html]The
 *   Climate Cookbook[/url] and some simple modelling.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MdGBWG</url>
 * 
 * <date>2018-06-30</date>
 * 
 * <tags></tags>
 * 
 * <other-passes>
 *   <pass-type>buffer0</pass-type>
 *   <pass-type>buffer1</pass-type>
 *   <pass-type>buffer2</pass-type>
 * </other-passes>
 *
 * <pass-name>Image</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Default" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel0; //! buffer[xbuf: 0, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]
uniform sampler2D iChannel1; //! buffer[xbuf: 1, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]
uniform sampler2D iChannel2; //! buffer[xbuf: 2, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]

#include "Global-Wind-Circulation.frag"

// comment out the following line for original style
#define PAPER

// uncomment the following line for Mollweide projection
//#define ELLIPTICAL

#ifdef PAPER
#define  LOW_PRESSURE vec3(0.,0.5,1.)
#define HIGH_PRESSURE vec3(1.,0.5,0.)
#else
#define  LOW_PRESSURE vec3(1.,0.5,0.)
#define HIGH_PRESSURE vec3(0.,0.5,1.)
#endif

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    float lat = 180. * fragCoord.y/iResolution.y - 90.;
#ifdef ELLIPTICAL
    fragCoord.x -= iResolution.x/2.;
    fragCoord.x /= sqrt(1. - pow(lat/90., 2.));
    if (abs(fragCoord.x/iResolution.x) > 0.5) return;
    fragCoord.x += iResolution.x/2.;
    fragCoord.x -= 0.05 * iTime * iResolution.x;
    fragCoord.x -= iMouse.x;
    fragCoord.x = mod(fragCoord.x, iResolution.x);
#endif
    vec2 p = fragCoord * MAPRES / iResolution.xy;
    if (p.x < 1.) p.x = 1.;
    vec2 uv = p / iResolution.xy;
    float land = texture(iChannel0, uv).x;
    fragColor = vec4(0,0,0,1);
    if (0.25 < land && land < 0.75) fragColor.rgb = vec3(0.5);
    float mbar = texture(iChannel1, uv + PASS3).x;
    if (iMouse.z > 0.) {
        vec3 r = LOW_PRESSURE;
        r = mix(r, vec3(0), smoothstep(1000., 1012., floor(mbar)));
        r = mix(r, HIGH_PRESSURE, smoothstep(1012., 1024., floor(mbar)));
        fragColor.rgb += 0.5 * r;
    } else {
        vec2 v = texture(iChannel1, uv + PASS4).xy;
        float flow = texture(iChannel2, fragCoord/iResolution.xy).z;
        vec3 hue = vec3(1.,0.75,0.5);
#ifndef PAPER
        hue = .6 + .6 * cos(atan(v.y,v.x) + vec3(0,23,21));
#endif
        float alpha = clamp(length(v), 0., 1.) * flow;
        fragColor.rgb = mix(fragColor.rgb, hue, alpha);
    }
#ifdef PAPER
    fragColor.rgb = 0.9 - 0.8 * fragColor.rgb;
    if (mod(fragCoord.x, floor(iResolution.x/36.)) < 1. ||
        mod(fragCoord.y, floor(iResolution.y/18.)) < 1.)
        fragColor.rgb = mix(fragColor.rgb, vec3(0.,0.5,1.), 0.2);
#endif
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}