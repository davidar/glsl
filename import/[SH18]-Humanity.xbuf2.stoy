/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>[SH18] Humanity</name>
 * 
 * <description>
 *   A short story about humanity, from a global perspective. Followed by a minigame
 *   in the spirit of SimEarth (see below to enable). Restart to sync music. Read
 *   the comment at the top of the code for commentary and instructions.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/XttcWn</url>
 * 
 * <date>2018-08-04</date>
 * 
 * <tags></tags>
 * 
 * <pass-name>Buffer C</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Buffer C" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel0; //! buffer[xbuf: 0, wrap: GL_CLAMP_TO_EDGE, mipmap: true]
uniform sampler2D iChannel1; //! buffer[xbuf: 1, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]
uniform sampler2D iChannel2; //! buffer[xbuf: 2, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]
uniform sampler2D iChannel3; //! buffer[xbuf: 3, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]

#include "[SH18]-Humanity.frag"

// 2018 David A Roberts <https://davidar.io>

// wind flow map, atmospheric water vapour, and air pollution model

float map(vec2 fragCoord) {
    return MAP_HEIGHT(texture(iChannel0, fragCoord/iResolution.xy).z);
}

vec2 getVelocity(vec2 uv) {
    vec2 p = uv * MAP_RES;
    if (p.x < 0.5) p.x = 0.5;
    vec2 v = texture(iChannel1, p/iResolution.xy + PASS4).xy;
    if (length(v) > 1.) v = normalize(v);
    return v;
}

vec2 getPosition(vec2 fragCoord) {
    for(int i = -1; i <= 1; i++) {
        for(int j = -1; j <= 1; j++) {
            vec2 uv = (fragCoord + vec2(i,j)) / iResolution.xy;
            vec2 p = texture(iChannel2, fract(uv)).xy;
            if(p.x == 0.) {
                if (hash13(vec3(fragCoord + vec2(i,j), iFrame)) > 1e-4) continue;
                p = fragCoord + vec2(i,j) + hash21(float(iFrame)) - 0.5; // add particle
            } else if (hash13(vec3(fragCoord + vec2(i,j), iFrame)) < 8e-3) {
                continue; // remove particle
            }
            vec2 v = getVelocity(uv);
            p = p + v;
            p.x = mod(p.x, iResolution.x);
            if(abs(p.x - fragCoord.x) < 0.5 && abs(p.y - fragCoord.y) < 0.5)
                return p;
        }
    }
    return vec2(0);
}

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    if (iFrame < 10) {
        fragColor = vec4(0);
        return;
    }
    
    vec4 c = texture(iChannel2, fragCoord/iResolution.xy);
    float particle = (c.x > 0.) ? 1. : 0.9 * c.y;
    vec2 p = getPosition(fragCoord);
    fragColor.xy = (p == vec2(0)) ? vec2(0., particle) : p;
    
    vec2 uv = fragCoord/iResolution.xy;
    
    vec2 v = getVelocity(uv);
    vec2 vn = getVelocity(uv + N/iResolution.xy);
    vec2 ve = getVelocity(uv + E/iResolution.xy);
    vec2 vs = getVelocity(uv + S/iResolution.xy);
    vec2 vw = getVelocity(uv + W/iResolution.xy);
    float div = (ve - vw).x/2. + (vn - vs).y/2.;
    
    float height = map(fragCoord);
    float hn = map(fragCoord + N);
    float he = map(fragCoord + E);
    float hs = map(fragCoord + S);
    float hw = map(fragCoord + W);
    vec2 hgrad = vec2(he - hw, hn - hs)/2.;
    
    vec4 climate = texture(iChannel1, uv * MAP_RES / iResolution.xy + PASS3);
    float mbar = climate.x;
    float temp = climate.y;
    c = texture(iChannel2, fract((fragCoord - v) / iResolution.xy));
    
    // water vapour advection
    float w = c.w;
    float noise = clamp(3. * FBM(vec3(5. * fragCoord/iResolution.xy, iTime)) - 1., 0., 1.);
    if (iTime < OCEAN_END_TIME) w += 0.08 * noise * (1. - smoothstep(OCEAN_START_TIME, OCEAN_END_TIME, iTime));
    if (height == 0.) w += noise * clamp(temp + 2., 0., 100.)/32. * (0.075 - 3. * div - 0.0045 * (mbar - 1012.));
    w -= 0.005 * w; // precipitation
    w -= 0.3 * length(hgrad); // orographic lift
    fragColor.w = clamp(w, 0., 3.);
    
    // pollution advection
    float co2 = c.z;
    vec4 d = texture(iChannel3, fragCoord/iResolution.xy);
    bool human = d.z == -1.;
    float moisture = d.w;
    if (human) {
        co2 += 0.015;
    } else {
        co2 -= 0.01 * plant_growth(moisture, temp);
    }
    fragColor.z = clamp(co2, 0., 3.);
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}