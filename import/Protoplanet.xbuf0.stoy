/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Protoplanet</name>
 * 
 * <description>
 *   What the early Earth may have looked like before it cooled enough for the oceans
 *   to form. [url]https://sservi.nasa.gov/articles/new-nasa-research-shows-giant-asteroids-battered-early-earth/[/url]
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/XsGBDt</url>
 * 
 * <date>2018-07-07</date>
 * 
 * <tags></tags>
 * 
 * <pass-name>Buf A</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Buf A" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel0; //! buffer[xbuf: 0, mipmap: false, filter: GL_LINEAR]

#include "Protoplanet.frag"

// procedural craters based on https://www.shadertoy.com/view/MtjGRD
float craters(vec3 x) {
    vec3 p = floor(x);
    vec3 f = fract(x);
    float va = 0.;
    float wt = 0.;
    for (int i = -2; i <= 2; i++) for (int j = -2; j <= 2; j++) for (int k = -2; k <= 2; k++) {
        vec3 g = vec3(i,j,k);
        vec3 o = 0.8 * hash33(p + g);
        float d = distance(f - g, o);
        float w = exp(-4. * d);
        va += w * sin(2.*PI * sqrt(d));
        wt += w;
	}
    return abs(va / wt);
}

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    if (iFrame > 10) {
        fragColor = texture(iChannel0, fragCoord/iResolution.xy);
        if (fragColor.zw == iResolution.xy) return;
    }
    float lat = 180. * fragCoord.y/iResolution.y - 90.;
    float lon = 360. * fragCoord.x/iResolution.x;
    vec3 p = 1.5 * vec3(sin(lon*PI/180.) * cos(lat*PI/180.), sin(lat*PI/180.), cos(lon*PI/180.) * cos(lat*PI/180.));
    fragColor.x = 0.;
    for (float i = 0.; i < 5.; i++) {
        float c = craters(0.4 * pow(2.2, i) * p);
        float noise = 0.4 * exp(-3. * c) * FBM(10. * p);
        float w = clamp(3. * pow(0.4, i), 0., 1.);
		fragColor.x += w * (c + noise);
	}
    fragColor.x = pow(fragColor.x, 3.);
    fragColor.zw = iResolution.xy;
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}