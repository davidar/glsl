/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Watercolour Earth</name>
 * 
 * <description>
 *   Water vapour evaporates from the ocean, is carried by wind currents, then rains
 *   onto the land, painting it with vegetation. See also: [url]https://www.shadertoy.com/view/MdGBWG[/url]
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MdKfWK</url>
 * 
 * <date>2018-07-05</date>
 * 
 * <tags></tags>
 * 
 * <other-passes>
 *   <pass-type>buffer0</pass-type>
 *   <pass-type>buffer1</pass-type>
 *   <pass-type>buffer2</pass-type>
 * </other-passes>
 *
 * <pass-name>Image</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Default" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel0; //! buffer[xbuf: 0, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]
uniform sampler2D iChannel1; //! buffer[xbuf: 1, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]
uniform sampler2D iChannel2; //! buffer[xbuf: 2, mipmap: false, filter: GL_LINEAR]

#include "Watercolour-Earth.frag"

// uncomment the following line for Mollweide projection
//#define ELLIPTICAL

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    fragColor = vec4(0,0,0,1);
    float lat = 180. * fragCoord.y/iResolution.y - 90.;
#ifdef ELLIPTICAL
    fragCoord.x -= iResolution.x/2.;
    fragCoord.x /= sqrt(1. - pow(lat/90., 2.));
    if (abs(fragCoord.x/iResolution.x) > 0.5) return;
    fragCoord.x += iResolution.x/2.;
    fragCoord.x -= 0.05 * iTime * iResolution.x;
    fragCoord.x -= iMouse.x;
    fragCoord.x = mod(fragCoord.x, iResolution.x);
#endif
    vec2 p = fragCoord * MAPRES / iResolution.xy;
    if (p.x < 1.) p.x = 1.;
    vec2 uv = p / iResolution.xy;
    
    float land = texture(iChannel0, uv).x;
    float temp = texture(iChannel1, uv + PASS3).y;
    vec4 water = texture(iChannel2, fragCoord/iResolution.xy);
    float vapour = water.w;
    float moisture = water.z;
    
    if (land < 0.5) { // ocean
        vec2 gradient = vec2(dFdx(temp), dFdy(temp));
        float contour = 1. - smoothstep(0., 1., 0.5 * fract(temp/1.5) / length(gradient));
        contour *= Noise(vec3(fragCoord, 0));
        fragColor.rgb = mix(fragColor.rgb, vec3(0.08), contour);
        if (land > 0.1) fragColor.rgb -= 0.01;
    } else {
        // dry land
        vec3 dry = vec3(0.89, 0.9, 0.89);
        dry = mix(dry, vec3(0.11, 0.10, 0.05), smoothstep(-10., 0., temp));
        dry = mix(dry, vec3(1.00, 0.96, 0.71), smoothstep( 0., 20., temp));
        dry = mix(dry, vec3(0.81, 0.48, 0.31), smoothstep(20., 30., temp));

        // vegetation
        vec3 veg = vec3(0.89, 0.9, 0.89);
        veg = mix(veg, vec3(0.56, 0.49, 0.28), smoothstep(-10., 0., temp));
        veg = mix(veg, vec3(0.18, 0.34, 0.04), smoothstep( 0., 20., temp));
        veg = mix(veg, vec3(0.05, 0.23, 0.04), smoothstep(20., 30., temp));
        
        fragColor.rgb = mix(dry, veg, moisture/5.);
        fragColor.rgb += 0.1 * Noise(vec3(fragCoord, 0));
    }

    // water vapour
    float alpha = 0.2 * log(1. + vapour) * (1. + 0.1 * Noise(vec3(fragCoord, 1)));
    if (land > 0.5) alpha *= 0.5;
    fragColor.rgb = mix(fragColor.rgb, vec3(1), alpha);
    
    fragColor.rgb = 0.1 + 0.8 * fragColor.rgb;
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}