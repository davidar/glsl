/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Global Wind Circulation</name>
 * 
 * <description>
 *   Generates pressure systems (click to show) and wind flow patterns from a land/ocean
 *   map. Based on [url=https://web.archive.org/web/20130619132254/http://jc.tech-galaxy.com/bricka/climate_cookbook.html]The
 *   Climate Cookbook[/url] and some simple modelling.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MdGBWG</url>
 * 
 * <date>2018-06-30</date>
 * 
 * <tags></tags>
 * 
 * <pass-name>Buf A</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Buf A" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")



#include "Global-Wind-Circulation.frag"

// 1-bit land/ocean map, 2.5 degree resolution
// auto-generated by https://github.com/rkibria/img2shadertoy
const vec2 bitmap_size = vec2(160, 72);
const int[] palette = int[] ( 0x00000000, 0x00ffffff );
const int[] rle = int[] ( 0x0001ff91, 0x03ff9100, 0xf8000000, 0x0008ff8f, 0xfffc0000, 0xf80fffff, 0x010aff89, 0xfe000000, 0x39ffffff, 0xff88fc3c, 0x0000030a, 0xffffc000, 0xc0003fff, 0x0100ff88, 0x80050084, 0x0000ffbf, 0x00ff87fe, 0x07008607, 0x20000078, 0xf7ffffff, 0x0f00ff83, 0x20000086, 0x20060083, 0xffff8fff, 0x00873fff, 0x00844000, 0x00007004, 0x0089f437, 0x00cd0100, 0x00921800, 0x00920c00, 0x00921c00, 0x008a1c00, 0x00860800, 0x008a3800, 0x00861000, 0x00897800, 0x00870400, 0x0089f800, 0x86400201, 0x01f80100, 0x0f000088, 0xf80b0087, 0x80000003, 0x00000007, 0x871fc3c0, 0x07f80b00, 0x0f800000, 0xc0000000, 0x00871fff, 0x000ff80b, 0x001f8000, 0xffc00000, 0x0b00871f, 0x00001ff0, 0x00001fc0, 0x1fffe000, 0xf00b0087, 0xc000003f, 0x0000063f, 0x870fffe0, 0xfff00b00, 0x3fe00000, 0xc0000004, 0x00870fff, 0x00fff00b, 0x0c3fe000, 0xfe000000, 0x0b008703, 0x0000fffc, 0x000cffe0, 0x027c0000, 0xfe0a0087, 0xe00000ff, 0x000008ff, 0x00883000, 0x01fffe05, 0x8dffe000, 0xffff0500, 0xffe00003, 0xff0b008d, 0xe00003ff, 0x000000ff, 0x87060004, 0xffff0b00, 0xfff00000, 0x02000000, 0x008703c1, 0x0007ff0a, 0x01fff000, 0x31710000, 0xff090088, 0xf000000f, 0x800003ff, 0x09008971, 0x000007fe, 0x0007fff0, 0x00896140, 0x0001fe09, 0x0ffffdf0, 0x88410100, 0xfec00b00, 0xfff80000, 0x80000fff, 0x00870600, 0x0008200a, 0xfffffc00, 0x0200c009, 0x700b0088, 0xfe000000, 0xc007ffff, 0x87010f80, 0x001e0b00, 0xfffc0000, 0x80e01eff, 0x00860107, 0x081bc00b, 0xfffc0000, 0xc3e07e7f, 0x0b008703, 0x000101c0, 0x7ffffe00, 0x07e7f0ff, 0xe00c0087, 0x00000001, 0x7fbffffc, 0x017ff7f8, 0xf00b0086, 0x00000081, 0x8ffffffc, 0x87ffffff, 0x83fc0c00, 0xf0000000, 0xfff7ffff, 0x8601ffff, 0x7ffa0700, 0xf0000000, 0xff83e77f, 0xfe070087, 0x000001ff, 0x83c00fe0, 0x853000ff, 0xff800800, 0x000003ff, 0x83c00f00, 0x85c800ff, 0xffc00e00, 0x000003ff, 0xcffb00f0, 0x043fffff, 0x0d008401, 0x07ffffc0, 0x61f00000, 0xffffcf67, 0x00850fff, 0xffffc00e, 0x8000000f, 0xfff707d7, 0x023fffff, 0xc00d0084, 0x003fffff, 0xafff8000, 0xffffffc3, 0x0900857f, 0x3fffffc0, 0xff800002, 0xff83e7ff, 0xe0070085, 0x03ffffff, 0x85fec000, 0x840100ff, 0xfff00700, 0x0001ff7f, 0xff85f890, 0x0083c000, 0xfff80108, 0x00007e1f, 0xff842840, 0x01c07f0f, 0x07000000, 0x6e03fffe, 0x7c000000, 0x0eff84fc, 0x00000101, 0xffffffc0, 0x00700603, 0x84ee7c00, 0x1f7f0eff, 0xff800000, 0x384fffff, 0xf00380f8, 0x0cff85fe, 0x8700007f, 0x7fffffff, 0x0003f878, 0x0eff87e0, 0xffc00000, 0x1e5c7bff, 0x80003ff8, 0x84df007f, 0x0d0084ff, 0xfc07f63e, 0x0000007f, 0xfffff820, 0x00841fef, 0xfd03c00c, 0x00fffc01, 0x00400000, 0x00875ffe, 0xf0e91204, 0x0083ffff, 0x1fa00302, 0x80060087, 0xfffff3f8, 0x0083f000, 0x00880300, 0xfffff004, 0x00c603ff );

const int rle_len_bytes = rle.length() << 2;

int get_rle_byte( in int byte_index )
{
        int long_val = rle[ byte_index >> 2 ];
        return ( long_val >> ( ( byte_index & 0x03 ) << 3 ) ) & 0xff;
}

int get_uncompr_byte( in int byte_index )
{
        int rle_index = 0;
        int cur_byte_index = 0;
        while( rle_index < rle_len_bytes )
        {
                int cur_rle_byte = get_rle_byte( rle_index );
                bool is_sequence = int( cur_rle_byte & 0x80 ) == 0;
                int count = ( cur_rle_byte & 0x7f ) + 1;

                if( byte_index >= cur_byte_index && byte_index < cur_byte_index + count )
                {
                        if( is_sequence )
                        {
                                return get_rle_byte( rle_index + 1 + ( byte_index - cur_byte_index ) );
                        }
                        else
                        {
                                return get_rle_byte( rle_index + 1 );
                        }
                }
                else
                {
                        if( is_sequence )
                        {
                                rle_index += count + 1;
                                cur_byte_index += count;
                        }
                        else
                        {
                                rle_index += 2;
                                cur_byte_index += count;
                        }
                }
        }

        return 0;
}


int getPaletteIndexXY( in ivec2 fetch_pos )
{
        int palette_index = 0;
        if( fetch_pos.x >= 0 && fetch_pos.y >= 0
                && fetch_pos.x < int( bitmap_size.x ) && fetch_pos.y < int( bitmap_size.y ) )
        {
                int uncompr_byte_index = fetch_pos.y * ( int( bitmap_size.x ) >> 3 )
                        + ( fetch_pos.x >> 3);
                int uncompr_byte = get_uncompr_byte( uncompr_byte_index );

                int bit_index = fetch_pos.x & 0x07;
                palette_index = ( uncompr_byte >> bit_index ) & 1;
        }
        return palette_index;
}


int getPaletteIndex( in vec2 uv )
{
        int palette_index = 0;
        ivec2 fetch_pos = ivec2( uv * bitmap_size );
        palette_index = getPaletteIndexXY( fetch_pos );
        return palette_index;
}

vec4 getColorFromPalette( in int palette_index )
{
        int int_color = palette[ palette_index ];
        return vec4( float( int_color & 0xff ) / 255.0,
                                float( ( int_color >> 8 ) & 0xff) / 255.0,
                                float( ( int_color >> 16 ) & 0xff) / 255.0,
                                0 );
}

vec4 getBitmapColor( in vec2 uv )
{
        return getColorFromPalette( getPaletteIndex( uv ) );
}

void mainImage( inout vec4 fragColor, in vec2 fragCoord )
{
        vec2 uv = fragCoord / bitmap_size;
        fragColor = getBitmapColor( uv );
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}