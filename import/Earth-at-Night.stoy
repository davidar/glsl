/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Earth at Night</name>
 * 
 * <description>
 *   Trying to recreate the style of these classic images: [url]https://svs.gsfc.nasa.gov/30028[/url]
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/XltyW8</url>
 * 
 * <date>2018-07-24</date>
 * 
 * <tags></tags>
 * 
 * <other-passes>
 * </other-passes>
 *
 * <pass-name>Image</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")



#include "Earth-at-Night.frag"

// 2018 David A Roberts <https://davidar.io>

float rexp(vec2 p) {
    return -log(1e-4 + (1. - 2e-4) * hash12(p));
}

float line(vec2 a, vec2 b, vec2 p, float width) {
    // http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
    vec2 pa = p - a, ba = b - a;
	float h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);	
    float d = length(pa - ba * h);
    float x = distance(p,a) / (distance(p,a) + distance(p,b));
    return 1.5 * mix(rexp(a), rexp(b), x) * smoothstep(width/2., 0., d) * smoothstep(1.75, 0.5, distance(a,b));
}

float network(vec2 p, float width) {
    // based on https://www.shadertoy.com/view/lscczl
    vec2 c = floor(p) + hash22(floor(p));
    vec2 n = floor(p) + N + hash22(floor(p) + N);
    vec2 e = floor(p) + E + hash22(floor(p) + E);
    vec2 s = floor(p) + S + hash22(floor(p) + S);
    vec2 w = floor(p) + W + hash22(floor(p) + W);
    
    float m = 0.;
    m += line(n, e, p, width);
	m += line(e, s, p, width);
    m += line(s, w, p, width);
    m += line(w, n, p, width);
   
    for (float y = -1.; y <= 1.; y++) {
        for (float x = -1.; x <= 1.; x++) {
            vec2 q = floor(p) + vec2(x,y) + hash22(floor(p) + vec2(x,y));
            float intensity = distance(p,q) / clamp(rexp(floor(p) + vec2(x,y)), 0., 1.);
            m += line(c, q, p, width);
            m += 5. * smoothstep(0.09, 0., intensity);
        }
    }
    
    return m;
}

float speckle(vec2 p, float density) {
    float m = 0.;
    for (float y = -1.; y <= 1.; y++) {
        for (float x = -1.; x <= 1.; x++) {
            vec2 q = floor(p) + vec2(x,y) + hash22(floor(p) + vec2(x,y));
            m += 1.5 * rexp(q) * smoothstep(1., 0.5, distance(p,q) / clamp(density, 0., 1.));
        }
    }
    return m;
}

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    vec2 uv = (fragCoord + vec2(iFrame,0)) / iResolution.y;
    vec2 wiggle = vec2(FBM(vec3(50. * uv, 1)), FBM(vec3(50. * uv, 2))) - 0.5;
    
    float height = FBM(vec3(6. * uv + 0.1 * wiggle, 3)) - 0.5;
    if (height < 0.) {
        fragColor = vec4(0.00, 0.01, 0.11, 1);
    } else {
        float d = 0.75;
        float width = 6e-3;
        d += 0.5 * network(50. * uv + 1.0 * wiggle, 50. * width);
        d += 1.0 * network(15. * uv + 0.3 * wiggle, 15. * width);
        d += 2.0 * network( 5. * uv + 0.1 * wiggle,  5. * width);
        d += smoothstep(0.04, 0., height); // coast
        d *= 0.1 + clamp(2. * FBM(vec3(12. * uv, 0)) - 0.5, 0., 1.);
        d *= 0.2 + 1.2 * clamp(2. * FBM(vec3(3. * uv, 0)) - 0.5, 0., 1.);

        uv = (fragCoord + vec2(iFrame,0)) / iResolution.y;
        float a = speckle(3. * uv / width, d);
        if (d > 5.) a = d;
        a *= 0.5 * FBM(vec3(50. * uv, iTime));
        
        fragColor = vec4(0.02, 0.03, 0.15, 1);
        fragColor.rgb *= 1. + 0.7 * clamp(FBM(vec3(100. * uv, 0)) - 0.15, 0., 1.);
        fragColor = mix(fragColor, 0.75 * sqrt(d) * vec4(0.95, 0.76, 0.47, 1), smoothstep(0., 1., a));
    }
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}