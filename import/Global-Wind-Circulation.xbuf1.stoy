/*!
 * <info>
 * <author>davidar [ https://www.shadertoy.com/user/davidar ]</author>
 * <name>Global Wind Circulation</name>
 * 
 * <description>
 *   Generates pressure systems (click to show) and wind flow patterns from a land/ocean
 *   map. Based on [url=https://web.archive.org/web/20130619132254/http://jc.tech-galaxy.com/bricka/climate_cookbook.html]The
 *   Climate Cookbook[/url] and some simple modelling.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MdGBWG</url>
 * 
 * <date>2018-06-30</date>
 * 
 * <tags></tags>
 * 
 * <pass-name>Buf B</pass-name>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

//! <group name="Buf B" />

uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iTime;                // shader playback time (in seconds)
uniform float iGlobalTime;          // shader playback time (in seconds) - <deprecated>
uniform float iTimeDelta;           // render time (in seconds)
uniform int iFrame;                 // shader playback frame
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)
uniform float iSampleRate;          // sound sample rate (i.e., 44100)
uniform float iFrameRate;           // frames per second (effectively "1.0 / iTimeDelta")

uniform sampler2D iChannel0; //! buffer[xbuf: 0, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]
uniform sampler2D iChannel1; //! buffer[xbuf: 1, wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_LINEAR]

#include "Global-Wind-Circulation.frag"

// 2018 David A Roberts <https://davidar.io>

// atmospheric pressure and circulation model

#define buf(uv) texture(iChannel1, uv)

#define SIGMA vec4(6,4,0,0)
vec4 normpdf(float x) {
	return 0.39894 * exp(-0.5 * x*x / (SIGMA*SIGMA)) / SIGMA;
}

// mean sea level pressure
vec4 mslp(vec2 uv) {
    float lat = 180. * (uv.y * iResolution.y / MAPRES.y) - 90.;
    float land = texture(iChannel0, uv).x;
    vec4 r;
    if (land > 0.) { // land
        r.x = 1012.5 - 6. * cos(lat*PI/45.); // annual mean
        r.y = 15. * sin(lat*PI/90.); // January/July delta
    } else { // ocean
        r.x = 1014.5 - 20. * cos(lat*PI/30.);
        r.y = 20. * sin(lat*PI/35.) * abs(lat)/90.;
    }
    return r;
}

// horizontally blurred MSLP
vec4 pass1(vec2 uv) {
    //if (iFrame > 10) return buf(uv + PASS1);
    vec4 r = vec4(0);
    for (float i = -20.; i <= 20.; i++)
        r += mslp(uv + i*E/iResolution.xy) * normpdf(i);
    return r;
}

// fully blurred MSLP
vec4 pass2(vec2 uv) {
    //if (iFrame > 10) return buf(uv + PASS2);
    vec4 r = vec4(0);
    for (float i = -20.; i <= 20.; i++)
        r += buf(uv + i*N/iResolution.xy + PASS1) * normpdf(i);
    return r;
}

// time-dependent MSLP
vec4 pass3(vec2 uv) {
    vec4 c = buf(uv + PASS2);
    float t = mod(iTime, 12.); // simulated month of the year
    float delta = c.y * (1. - 2. * smoothstep(1.5, 4.5, t) + 2. * smoothstep(7.5, 10.5, t));
    return vec4(c.x + delta,0,0,0);
}

// wind vector field
vec4 pass4(vec2 uv) {
    vec2 p = uv * iResolution.xy;
    float n = buf(mod(p + N, MAPRES)/iResolution.xy + PASS3).x;
    float e = buf(mod(p + E, MAPRES)/iResolution.xy + PASS3).x;
    float s = buf(mod(p + S, MAPRES)/iResolution.xy + PASS3).x;
    float w = buf(mod(p + W, MAPRES)/iResolution.xy + PASS3).x;
    vec2 grad = vec2(e - w, n - s) / 2.;
    float lat = 180. * fract(uv.y * iResolution.y / MAPRES.y) - 90.;
    vec2 coriolis = 15. * sin(lat*PI/180.) * vec2(-grad.y, grad.x);
    vec2 v = coriolis - grad;
    return vec4(v,0,0);
}

void mainImage( inout vec4 fragColor, in vec2 fragCoord ) {
    vec2 uv = fragCoord / iResolution.xy;
    if (uv.x < 0.5) {
        if (uv.y < 0.5) {
    		fragColor = pass1(uv - PASS1);
        } else {
    		fragColor = pass2(uv - PASS2);
        }
    } else {
        if (uv.y < 0.5) {
    		fragColor = pass3(uv - PASS3);
        } else {
    		fragColor = pass4(uv - PASS4);
        }
    }
}


void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}